{"version":3,"file":"static/js/382.732ff94b.chunk.js","mappings":"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","sources":["components/DynamicTable/DynamicTable.jsx","helpers/colorType.js","components/OperationTablet/OperationTablet.jsx","components/Operations/Operations.jsx","components/RecentCustomers/RecentCustomers.jsx","components/StatisticsItem/StatisticsItem.jsx","helpers/formatNumber.js","components/Statistics/Statistics.jsx","pages/Dashboard/Dashboard.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const TableContainer = styled.div`\n  border-radius: 0 0 8px 8px;\n  border: 1px solid rgba(29, 30, 33, 0.10);\n  background: #FFF;\n  overflow-x: auto; /* Горизонтальный скролл */\n\n  /* Стилизация горизонтального скролла */\n  &::-webkit-scrollbar {\n    padding-bottom: 15px;\n    height: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: #f1f1f1; \n  }\n\n  &::-webkit-scrollbar-thumb {\n  border-radius: 14px;\nbackground: #E6E6E6;\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    background: #555; \n  }\n\n \n  padding-left: 14px; \n  padding-right: 14px; \n`;\nexport const TableTitle = styled.h3`\n  font-size: 16px;\n  font-weight: 600;\n  margin: 0;\n`;\n\nexport const Table = styled.table`\n  min-width: 300px; \n  width:100%;\n  border-collapse: collapse;\n  background: #FFF;\n\n  th, td {\n    border: 1px solid #ddd;\n    padding: 14px 8px;\n    text-align: left;\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 14px;\n    border-top: none; \n    border-left: none; \n  }\n\n  tr:last-child td {\n    border-bottom: none; \n  }\n\n  th {\n    border-top: none;\n    color: rgba(29, 30, 33, 0.40);\n  }\n\n  th:last-child {\n    border-right: none;\n    padding-right: 0;\n  }\n\n  th:first-child {\n    padding-left: 0;\n  }\n\n  td:last-child {\n    border-right: none;\n    padding-right: 0;\n  }\n\n  td:first-child {\n    padding-left: 0;\n  }\n`;\n\nexport const Box = styled.div`\n  border-radius: 8px 8px 0 0;\n \n  padding: 14px;\n  width: 100%;\n  background: #E7F1ED;\n`;\n\nconst BoxName = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst Name = styled.h4`\n  margin: 0;\n`;\n\nexport const ScrollBox = styled.div`\n  width: calc(100% - 60px);\n  overflow-x: auto; \n \n`;\n\nconst DynamicTable = ({ columns, data, title }) => {\n    return (\n        <ScrollBox>\n            <Box>\n                <TableTitle>{title}</TableTitle>\n            </Box>\n            <TableContainer>\n                <Table>\n                    <thead>\n                        <tr>\n                            {columns.map((column, index) => (\n                                <th key={index}>{column}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((row, rowIndex) => (\n                            <tr key={rowIndex}>\n                                {columns.map((column, colIndex) => (\n                                    <td key={colIndex}>\n                                        {column === 'Name' && row.image ? (\n                                            <BoxName>\n                                                <img className=\"avatar\" src={row.image} alt=\"Avatar\" width={36} height={36} />\n                                                <Name>{row.name}</Name>\n                                            </BoxName>\n                                        ) : (\n                                            row[column.toLowerCase()]\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </TableContainer>\n        </ScrollBox>\n    );\n};\n\nexport default DynamicTable;\n","export const getColorByType = (type) => {\n  switch (type) {\n    case \"Income\":\n      return \"var(--green)\";\n    case \"Expense\":\n      return \"var(--red)\";\n    case \"Error\":\n      return \"var(--main-black)\";\n    default:\n      return \"inherit\";\n  }\n};\nexport const getBgColorByType = (type) => {\n  switch (type) {\n    case \"Income\":\n      return \"rgba(89, 177, 122, 0.10)\";\n    case \"Expense\":\n      return \"rgba(232, 80, 80, 0.10)\";\n    case \"Error\":\n      return \"rgba(29, 30, 33, 0.10)\";\n    default:\n      return \"inherit\";\n  }\n};\n","import { Box, TableContainer, TableTitle, Table, ScrollBox } from 'components/DynamicTable/DynamicTable';\nimport { getBgColorByType, getColorByType } from 'helpers/colorType';\nimport React from 'react'\nimport styled from 'styled-components';\n\nconst OperationTablet = ({ columns, data, title }) => {\n\n\n    const Text = styled.div`\n    width: 80px;\n     color: ${props => props.color};\n     padding: 4px 10px;\n    background-color:  ${props => props.bgcolor};\n    border-radius: 40px;\n    text-align: center;\n      ${props => props.$isError && `\n            text-decoration: line-through;\n        `}\n    `;\n\n    return (\n        <ScrollBox>\n            <Box><TableTitle>{title}</TableTitle></Box>\n            <TableContainer>\n                <Table>\n                    <thead>\n                        <tr>\n                            {columns.map((column, index) => (\n                                <th style={{ borderLeft: \"none\", borderRight: \"none\" }} key={index}>{column}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((row, rowIndex) => (\n                            <tr key={rowIndex}>\n                                <td style={{ borderLeft: \"none\", borderRight: \"none\" }}><Text color={getColorByType(row.type)} bgcolor={getBgColorByType(row.type)}>{row.type}</Text></td>\n                                <td style={{ borderLeft: \"none\", borderRight: \"none\" }}>{row.name}</td>\n                                <td style={{ borderLeft: \"none\", borderRight: \"none\" }}><Text color={getColorByType(row.type)} $isError={row.type === 'Error'}>{row.amount}</Text></td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </TableContainer ></ScrollBox >\n    );\n};\n\n\n\nexport default OperationTablet;\n","\nimport OperationTablet from 'components/OperationTablet/OperationTablet';\nimport React from 'react'\n\nconst Operations = ({ props }) => {\n    console.log(props)\n    const columns = [\"Today\", \"\", \"\"];\n\n\n    return (\n        <div style={{ marginTop: \"40px\" }}>\n\n            <OperationTablet columns={columns} data={props} title={\"Income/Expenses\"} />\n        </div>\n    )\n\n}\nexport default Operations;","import DynamicTable from 'components/DynamicTable/DynamicTable'\nimport React from 'react'\nimport styled from 'styled-components';\n\n\nconst Container = styled.div`\n\n\n`;\nconst RecentCustomers = ({ props }) => {\n\n\n    const filteredData = props.map(({ image, name, email, spent }) => ({ image, name, email, spent }));\n    const columns = [\"Name\", \"Email\", \"Spent\"];\n    return (\n        <Container>\n\n            <DynamicTable columns={columns} data={filteredData} title={\"Recent Customers\"} />\n        </Container>\n    )\n}\nexport default RecentCustomers;","import React from 'react'\nimport styled from 'styled-components'\nimport sprite from '../../img/svg/symbol-defs.svg'\nimport SubTitle from 'components/SubTitle/SubTitle';\nimport { formatNumber } from 'helpers/formatNumber';\nconst Container = styled.div`\n    width: 157px;\nheight: 98px;\npadding: 14px;\nborder-radius: 8px;\nborder: 1px solid rgba(29, 30, 33, 0.10);\n\nbackground: #FFF;\n`;\nconst Value = styled.h3`\n    font-size: 16px;\n    font-weight: 600;\n \n    margin-top: 32px;\n`\nconst StatisticsItem = ({ name, value, icon }) => {\n\n    return (\n        <Container>\n            <div style={{ display: \"flex\", gap: \"8px\" }}>\n                <svg width={18} height={18} style={{ stroke: \"var(--main-black)\", fill: \"white\", strokeWidth: 1 }}>\n                    <use href={`${sprite}${icon}`}></use>\n                </svg>\n                <SubTitle>{name}</SubTitle>\n            </div>\n            <Value>{formatNumber(value)}</Value>\n\n        </Container>\n    )\n}\nexport default StatisticsItem;","export const formatNumber = (num) => {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","import StatisticsItem from 'components/StatisticsItem/StatisticsItem';\nimport React from 'react'\n\n\nconst Statistics = ({ props }) => {\n\n\n    const { totalProducts, totalCustomers, totalSuppliers } = props;\n\n    const arr = [\n        { name: \"All Products\", value: totalProducts, icon: \"#icon-cash\" },\n        { name: \"All Customers\", value: totalCustomers, icon: \"#icon-cash\" },\n        { name: \"All Suppliers\", value: totalSuppliers, icon: \"#icon-users\" }\n    ];\n\n    return (\n        <div>\n            <ul style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"20px\", marginTop: 0 }}>{arr.map((el, index) => <li key={index}> <StatisticsItem {...el} /></li>)}\n\n\n            </ul>\n        </div>\n    )\n}\nexport default Statistics;","import Operations from 'components/Operations/Operations';\nimport RecentCustomers from 'components/RecentCustomers/RecentCustomers';\nimport Statistics from 'components/Statistics/Statistics';\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getDashboard } from 'store/operations';\nimport { selectGetDashboard } from 'store/selectors';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    padding-top: 20px;\n     \n`;\nconst Dashboard = () => {\n    const dispatch = useDispatch();\n    const dashboard = useSelector(selectGetDashboard);\n    useEffect(() => {\n        dispatch(getDashboard());\n    }, [dispatch])\n    if (dashboard.length === 0) return null;\n\n    return (\n        <Container>\n            <Statistics props={dashboard} />\n            <RecentCustomers props={dashboard.recentCustomers} />\n            <Operations props={dashboard.operations} />\n        </Container>\n    )\n}\nexport default Dashboard;"],"names":["TableContainer","styled","div","_templateObject","_taggedTemplateLiteral","TableTitle","h3","_templateObject2","Table","table","_templateObject3","Box","_templateObject4","BoxName","_templateObject5","Name","h4","_templateObject6","ScrollBox","_templateObject7","_ref","columns","data","title","_jsxs","children","_jsx","map","column","index","row","rowIndex","colIndex","image","className","src","alt","width","height","name","toLowerCase","getColorByType","type","getBgColorByType","Text","props","color","bgcolor","$isError","style","borderLeft","borderRight","amount","console","log","marginTop","OperationTablet","Container","filteredData","_ref2","email","spent","DynamicTable","Value","value","icon","display","gap","stroke","fill","strokeWidth","href","concat","sprite","SubTitle","num","toString","replace","totalProducts","totalCustomers","totalSuppliers","arr","flexWrap","el","StatisticsItem","Dashboard","dispatch","useDispatch","dashboard","useSelector","selectGetDashboard","useEffect","getDashboard","length","Statistics","RecentCustomers","recentCustomers","Operations","operations"],"sourceRoot":""}