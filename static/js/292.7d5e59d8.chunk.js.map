{"version":3,"file":"static/js/292.7d5e59d8.chunk.js","mappings":"4NAOA,MAAMA,EAAMC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2JAUhBC,EAAWJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,QAErBG,EAAYN,EAAAA,GAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0BAItBK,EAAYR,EAAAA,GAAOS,IAAGC,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,4DAgC5B,EA3BkBQ,IAAmB,IAAlB,SAAEC,GAAUD,EAC3B,MAAM,aAAEE,IAAiBC,EAAAA,EAAAA,MAMzB,OAEIC,EAAAA,EAAAA,KAAA,QAAMH,SAAUC,GANMG,IACtBJ,EAASI,EAAK,IAKiCC,UAC3CC,EAAAA,EAAAA,MAACnB,EAAG,CAAAkB,SAAA,EACAF,EAAAA,EAAAA,KAACX,EAAQ,CAAAa,UACLF,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,YAAY,YAAYC,KAAK,OAAOC,KAAK,YAEzDP,EAAAA,EAAAA,KAACT,EAAS,CAAAW,UACNC,EAAAA,EAAAA,MAACK,EAAAA,EAAY,CAACF,KAAK,SAAQJ,SAAA,EACvBF,EAAAA,EAAAA,KAACP,EAAS,CAACgB,MAAO,GAAIC,OAAQ,GAAGR,UAC7BF,EAAAA,EAAAA,KAAA,OAAKW,KAAI,GAAAC,OAAKC,EAAAA,EAAM,oBACZ,cAGR,QACb,C,4IC9Cf,MAUA,EAVqBjB,IAAgB,IAAf,MAAEkB,GAAOlB,EAG3B,OACII,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAb,UAENF,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACC,QAJN,CAAC,YAAa,QAAS,UAAW,QAAS,iBAInBhB,KAAMa,EAAOI,MAAO,mBAC5C,E,oCCDpB,MAAMH,EAAY9B,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gDA0C5B,EArCkB+B,KACd,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MACVC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,KACvBC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IAE3CC,EAAAA,EAAAA,YAAU,KACNV,GAASW,EAAAA,EAAAA,IAAa,CAAC,GAAG,GAC3B,CAACX,IAmBJ,OACIjB,EAAAA,EAAAA,MAACY,EAAS,CAAAb,SAAA,EACNF,EAAAA,EAAAA,KAACgC,EAAAA,GAAY,IAAKV,EAAOpB,UACrBF,EAAAA,EAAAA,KAACiC,EAAAA,EAAS,CAACpC,SApBAqC,UACnB,IAGqC,WAFTd,GAASW,EAAAA,EAAAA,IAAa,CAAEI,MAAOlC,EAAKmC,MAAQ,OAEtDC,QAAQC,QAClBV,GAAa,GACbW,EAAAA,GAAMC,MAAM,qBAEZZ,GAAa,EAErB,CAAE,MAAOY,GACLC,QAAQD,MAAM,4BAA6BA,GAC3CD,EAAAA,GAAMC,MAAM,4BAChB,OASKb,EAAY,MAAO3B,EAAAA,EAAAA,KAAC0C,EAAY,CAAC5B,MAAOU,MACjC,C","sources":["components/FilterBox/FilterBox.jsx","components/AllCustomers/AllCustomers.jsx","pages/Customers/Customers.jsx"],"sourcesContent":["import React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport styled from 'styled-components';\nimport sprite from '../../img/svg/symbol-defs.svg';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport InputField from 'components/InputField/InputField';\n\nconst Box = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: 8px;\n  margin-bottom: 14px;\n  @media (min-width: 768px) {\n    width: 354px;\n  }\n`;\n\nconst InputBox = styled.div``;\n\nconst ButtonBox = styled.div`\n  width: 100%;\n`;\n\nconst StyledSvg = styled.svg`\n  stroke: var(--main-black);\n  stroke-width: 1;\n`;\n\nconst FilterBox = ({ onSubmit }) => {\n    const { handleSubmit } = useFormContext();\n\n    const handleFormSubmit = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\n            <Box>\n                <InputBox>\n                    <InputField placeholder=\"User Name\" type=\"text\" name=\"Name\" />\n                </InputBox>\n                <ButtonBox>\n                    <CustomButton type=\"submit\">\n                        <StyledSvg width={14} height={14}>\n                            <use href={`${sprite}#icon-filter`} />\n                        </StyledSvg>\n                        Filter\n                    </CustomButton>\n                </ButtonBox> </Box>\n        </form>\n\n    );\n};\n\nexport default FilterBox;\n","import DynamicTable from 'components/DynamicTable/DynamicTable'\nimport { Container } from 'components/RecentCustomers/RecentCustomers';\nimport React from 'react'\n\nconst AllCustomers = ({ props }) => {\n\n    const columns = [\"User Info\", \"Email\", \"Address\", \"Phone\", \"Register date\"];\n    return (\n        <Container>\n\n            <DynamicTable columns={columns} data={props} title={\"All Customers\"} />\n        </Container>\n    )\n}\nexport default AllCustomers;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport FilterBox from 'components/FilterBox/FilterBox';\nimport AllCustomers from 'components/AllCustomers/AllCustomers';\nimport { getCustomers } from 'store/operations';\nimport { selectGetCustomers } from 'store/selectors';\nimport toast from 'react-hot-toast';\n\nconst Container = styled.div`\n  padding-top: 40px;\n  width: 100%;\n`;\n\nconst Customers = () => {\n    const dispatch = useDispatch();\n    const methods = useForm();\n    const customers = useSelector(selectGetCustomers);\n    const [noResults, setNoResults] = useState(false);\n\n    useEffect(() => {\n        dispatch(getCustomers({}));\n    }, [dispatch]);\n\n    const onSubmitFilter = async (data) => {\n        try {\n            const customers = await dispatch(getCustomers({ query: data.Name || '' }));\n\n            if (customers.payload.length === 0) {\n                setNoResults(true);\n                toast.error('No results found');\n            } else {\n                setNoResults(false);\n            }\n        } catch (error) {\n            console.error('Error fetching customers:', error);\n            toast.error('Failed to fetch customers');\n        }\n    };\n\n\n    return (\n        <Container>\n            <FormProvider {...methods}>\n                <FilterBox onSubmit={onSubmitFilter} />\n            </FormProvider>\n            {noResults ? null : <AllCustomers props={customers} />}\n        </Container>\n    );\n};\n\nexport default Customers;\n"],"names":["Box","styled","div","_templateObject","_taggedTemplateLiteral","InputBox","_templateObject2","ButtonBox","_templateObject3","StyledSvg","svg","_templateObject4","_ref","onSubmit","handleSubmit","useFormContext","_jsx","data","children","_jsxs","InputField","placeholder","type","name","CustomButton","width","height","href","concat","sprite","props","Container","DynamicTable","columns","title","Customers","dispatch","useDispatch","methods","useForm","customers","useSelector","selectGetCustomers","noResults","setNoResults","useState","useEffect","getCustomers","FormProvider","FilterBox","async","query","Name","payload","length","toast","error","console","AllCustomers"],"sourceRoot":""}